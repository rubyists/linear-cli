#!/usr/bin/env bash

: "${IMAGE_NAME:=$(basename "$(pwd)")}"
: "${BUILD_CONTEXT:=$(pwd)}"

usage() { # {{{
    cat <<-EOT
    Usage: $0 <options> <image_tag>
        Options:
            -i NAME           Name of the image (default: $IMAGE_NAME)
            -c CONTAINERFILE  Path to the containerfile (default: ./oci/Containerfile)
            -C CONTEXT        Build context (default: $BUILD_CONTEXT)
            -p                Push the image to the registry
            -s                Also mark the image as stable
            -h                Show help / usage
EOT
} # }}}

die() { # {{{
    local -i code
    code=$1
    shift
    printf "Error! => %s\n"  "$*" >&2
    printf "\n" >&2
    usage >&2
    # shellcheck disable=SC2086
    exit $code
} # }}}

push=0
stable=0
while getopts :hpi:c:C:s opt # {{{
do
    case $opt in
        c)
            CONTAINERFILE=$OPTARG
            ;;
        C)
            BUILD_CONTEXT=$OPTARG
            ;;
        i)
            IMAGE_NAME=$OPTARG
            ;;
        p)
            push=1
            ;;
        s)
            stable=1
            ;;
        h)
            usage
            exit
            ;;
        :)
            printf "Option %s requires an argument\n" "$OPTARG" >&2
            usage >&2
            exit 28
            ;;
        ?)
            printf "Invalid option '%s'\n" "$OPTARG" >&2
            usage >&2
            exit 27
            ;;
    esac
done # }}}
shift $((OPTIND-1))

tag=$1
[ -z "$tag" ] && die 1 "Missing image tag"
shift

[ $# -gt 0 ] && die 2 "Too many arguments"

if [ -z "$CONTAINERFILE" ]; then
    printf "No containerfile specified, looking for default locations\n"
    for containerfile in Containerfile Dockerfile
    do
        if [ -f ./oci/"$containerfile" ]; then
            printf "Found ./oci/%s\n" "$containerfile" >&2
            containerfile=./oci/"$containerfile"
            break
        fi
        if [ -f "$containerfile" ]; then
            printf "Found %s\n" "$containerfile" >&2
            break
        fi
    done
else
    [ -f "$CONTAINERFILE" ] || die 3 "Containerfile '$CONTAINERFILE' not found"
    printf "Using containerfile %s\n" "$CONTAINERFILE" >&2
    containerfile=$CONTAINERFILE
fi

[ -f "$containerfile" ] || die 4 "No containerfile found"

[ -d "$BUILD_CONTEXT" ] || die 5 "Build context '$BUILD_CONTEXT' not found"

# Build the image
if command -v podman 2>/dev/null
then
    runtime=podman
elif command -v docker 2>/dev/null
then
    runtime=docker
else
    die 6 "No container runtime found"
fi

$runtime build --build-arg "APP_VERSION=${tag}" -t "$IMAGE_NAME:$tag" -f "$containerfile" "$BUILD_CONTEXT" || die 7 "Failed to build image"

set -x
[ $push -eq 1 ] || exit 0
# push the image
registry_image_name="ghcr.io/rubyists/$IMAGE_NAME:$tag"
if ! $runtime login --get-login ghcr.io
then
    printf "Not logged in to ghcr.io, trying to login\n" >&2
    [ -z "$GITHUB_TOKEN" ] && die 8 "No GITHUB_TOKEN set, cannot login"
    printf "%s" "$GITHUB_TOKEN" | $runtime login -u "$GITHUB_TOKEN" --password-stdin ghcr.io || die 9 "Failed to login to ghcr.io"
fi

if [ "$runtime" = "podman" ]
then
    podman push "$IMAGE_NAME:$tag" "$registry_image_name" || die 10 "Failed to push image"
else
    docker push "$registry_image_name" || die 11 "Failed to push image"
fi

[ "$stable" -eq 0 ] && exit 0
# Mark the image as stable
registry_stable_name="ghcr.io/rubyists/$IMAGE_NAME:stable"
if [ "$runtime" = "podman" ]
then
    podman push "$IMAGE_NAME:$tag" "$registry_stable_name" || die 10 "Failed to push image"
else
    docker push "$registry_stable_name" || die 11 "Failed to push image"
fi
